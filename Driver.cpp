#include "Driver.h"

//dynamic playlist object creation
//stores playlist object pointers in a map of "playlists"
void DotifyDriver::createNewPlaylist(string name){
		if(playlists.count(name)==1){
			cout<<"Playlist \""<<name<<"\" already exists."<<endl;
			return;
		}
		else{
			Playlist * newPlaylist;
			newPlaylist= new Playlist(name);
			playlists.insert(pair<string, Playlist*>(name, newPlaylist));
			cout<<"Playlist \""<<name<<"\" created successfully."<<endl;
		}
}

//this stores the Playlist object pointer in a temp variable
//creates a new key based on the user input
//stores the temp Playlist object pointer
//erases the past playlist key
void DotifyDriver::renamePlaylist(string x, string y){
	if(playlists.count(x)==0)
		cout<<"Playlist \""<<x<<"\" does not exist."<<endl;
	else if(isPlaylist(y))
		cout<<"Playlist \""<<y<<"\" already exists."<<endl;
	else{
		Playlist * temp=playlists.find(x)->second;
		cout<<"Playlist \""<<x<<"\"";
		playlists.erase(x);
		playlists.insert(pair<string, Playlist*>(y, temp));
		cout<<" renamed successfully to \""<<y<<"\""<<endl;
	}
}

//encapsulated call to library function 
//that uses lambda functions to store
//map values pushed to vector and sort based on specified order
void DotifyDriver::printLibrary(string choice){
	library.displayInOrder(choice);
}

//iteratoes through the playslist map
//keys are playlist titles and are inherently stored in order
void DotifyDriver::printAllPlaylists(){
	if(playlists.empty()){
		cout<<"No playlists to display."<<endl;
		return;
	}
	else{
		int count=0;
		for(auto & key: playlists){
			count++;
			cout<<count;
			cout<<". \"";
			cout<<key.first<<"\" - ";
			cout<<"Rating: "<<key.second->getRating()<<" - ";
			cout<<key.second->getNumberOfSongs()<<" songs"<<endl;
		}
	}
}

//removes play list from playlists map container
//if playlist not found inform user
void DotifyDriver::removePlaylist(string name){
	if(playlists.count(name)!=1)
		cout<<"Playlist "<<"\""<<name<<"\""<<" does not exist."<<endl;
	else
		playlists.erase(name);
}

//remove function removes song from library and also from any playlists that have the key
//if library is empty or ID# is not found inform user
void DotifyDriver::removeSongLibrary(int x){
	if(getLibrarySize()==0){
		cout<<"No songs exist in library to be removed."<<endl;
	}
	else if(isInLibrary(x)){
		string libraryKey=library.keyReturn(x);
		library.removeSong(x);
		for(auto key: playlists){
			if(isInAPlaylist(key.first, libraryKey)){
				cout<<"Also removed from playlist \""<<key.first<<"\". ";
				key.second->erase(libraryKey);
			}
		}
	}
	else
		cout<<"No song with identifier #"<<x<<" in library."<<endl;
}

//generates a playlist based on a user choice
//iterates through the library using defined begin and end iterators to allow abstraction
//the Name, Artist, Album options create playlists by adding all songs that match the search key
void DotifyDriver::autogeneratePlaylist(string choice){
	string jumpingPoint;
	if(choice=="NAME"){
		cout<<"What is the song name you’d like to autogenerate a playlist from?"<<endl;
		getline(cin, jumpingPoint);
		createNewPlaylist(jumpingPoint);
		for (map<string, Song*>::iterator it=library.beginLibrary(); it!=library.endLibrary(); it++){
			if(it->second->getTitle()==jumpingPoint)
				addSongToPlaylist(jumpingPoint, it->second->getIdentifier());
		}
	}
	else if(choice=="ARTIST"){
		cout<<"Who is the song artist you’d like to autogenerate a playlist from?"<<endl;
		getline(cin, jumpingPoint);
		createNewPlaylist(jumpingPoint);
		for (map<string, Song*>::iterator it=library.beginLibrary(); it!=library.endLibrary(); it++){
			if(it->second->getArtist()==jumpingPoint)
				addSongToPlaylist(jumpingPoint, it->second->getIdentifier());
		}
	}
	else if(choice=="ALBUM"){
		cout<<"What is the song album you’d like to autogenerate a playlist from?"<<endl;
		getline(cin, jumpingPoint);
		createNewPlaylist(jumpingPoint);
		for (map<string, Song*>::iterator it=library.beginLibrary(); it!=library.endLibrary(); it++){
			if(it->second->getAlbum()==jumpingPoint)
				addSongToPlaylist(jumpingPoint, it->second->getIdentifier());
		}
	}
	else if(choice=="MAGIC"){
		vector<Song*> forHitlist2;
		vector<Song*> forHitlist;
		vector<Song*> hitlist;
		int count=0;

		createNewPlaylist("Autogenerated");

		for (map<string, Song*>::iterator it=library.beginLibrary(); it!=library.endLibrary(); it++){
				forHitlist2.push_back(it->second);
		}
		//sorted in reverse order
		sort(forHitlist2.begin(), forHitlist2.end(), [](Song* a, Song* b){return a->getAmtPlays() > b->getAmtPlays();});

		for (int it=0; it<forHitlist2.size(); it++){
			if(count<15){
				count++;
				forHitlist.push_back(forHitlist2.at(it));
			}
		}
		forHitlist2.clear();
		for(int count=0; count<5; count++){
			int randomVectorSpot=rand()%forHitlist.size();
			hitlist.push_back(forHitlist.at(randomVectorSpot));
		}
		forHitlist.clear();
		cout<<"Autogenerating based on the following songs:"<<endl;
		for(int count=0; count<6; count++){
			autogenerateHelper(hitlist, autogenerateRandomizerHelper());
		}
	}
}

//Magic generate helper that takes a vector of SOngs and a string choice as args
//it the 5 song hit list vector and a string choice and 
//randomly generates a song to pick from the library that matches a parameter from a random son in the hitlist vector
void DotifyDriver::autogenerateHelper(vector<Song*>vec, string choice){
	int count=0;
	int randomVectorSpot=rand()%vec.size();
	bool noneFound=true;
	if(choice=="NAME"){
		cout<<endl;
		cout<<"     ";
		cout<<"\""<<vec.at(randomVectorSpot)->getTitle()<<"\"";
		cout<<" by "<<vec.at(randomVectorSpot)->getArtist();
		cout<<" ("<<vec.at(randomVectorSpot)->getAlbum()<<").";
		cout<<"Similar songs by NAME:"<<endl;
		for (map<string, Song*>::iterator it=library.beginLibrary(); it!=library.endLibrary(); it++){
			if(it->second->getIdentifier()!=vec.at(randomVectorSpot)->getIdentifier()&&it->second->getTitle()==vec.at(randomVectorSpot)->getTitle()&&count<3&&!isInAPlaylist("Autogenerated", it->first)){
					noneFound=false;
					count++;
					cout<<"          ";
					cout<<"\""<<it->second->getTitle()<<"\"";
					cout<<" by "<<it->second->getArtist();
					cout<<" ("<<it->second->getAlbum()<<")."<<endl;
	
					addSongToPlaylistMagic("Autogenerated", it->second->getIdentifier());
			}
		}
		if(noneFound)
			cout<<"          (No similar songs founds)"<<endl;
	}
	else if(choice=="ARTIST"){
		cout<<endl;
		cout<<"     ";
		cout<<"\""<<vec.at(randomVectorSpot)->getTitle()<<"\"";
		cout<<" by "<<vec.at(randomVectorSpot)->getArtist();
		cout<<" ("<<vec.at(randomVectorSpot)->getAlbum()<<").";
		cout<<"          Similar songs by ARTIST:"<<endl;
		for (map<string, Song*>::iterator it=library.beginLibrary(); it!=library.endLibrary(); it++){
			if(it->second->getIdentifier()!=vec.at(randomVectorSpot)->getIdentifier()&&it->second->getArtist()==vec.at(randomVectorSpot)->getArtist()&&count<3&&!isInAPlaylist("Autogenerated", it->first)){
					noneFound=false;
					count++;
					cout<<"          ";
					cout<<"\""<<it->second->getTitle()<<"\"";
					cout<<" by "<<it->second->getArtist();
					cout<<" ("<<it->second->getAlbum()<<")."<<endl;
					addSongToPlaylistMagic("Autogenerated", it->second->getIdentifier());
			}
		}
		if(noneFound)
			cout<<"          (No similar songs founds)"<<endl;
	}
	else if(choice=="ALBUM"){
		cout<<endl;
		cout<<"     ";
		cout<<"\""<<vec.at(randomVectorSpot)->getTitle()<<"\"";
		cout<<" by "<<vec.at(randomVectorSpot)->getArtist();
		cout<<" ("<<vec.at(randomVectorSpot)->getAlbum()<<")."; 
		cout<<"Similar songs by ALBUM:"<<endl;
		for (map<string, Song*>::iterator it=library.beginLibrary(); it!=library.endLibrary(); it++){
			if(it->second->getIdentifier()!=vec.at(randomVectorSpot)->getIdentifier()&&it->second->getAlbum()==vec.at(randomVectorSpot)->getAlbum() && count<3&&!isInAPlaylist("Autogenerated", it->first)){
					noneFound=false;
					count++;
					cout<<"          ";
					cout<<"\""<<it->second->getTitle()<<"\"";
					cout<<" by "<<it->second->getArtist();
					cout<<" ("<<it->second->getAlbum()<<")."<<endl;
					addSongToPlaylistMagic("Autogenerated", it->second->getIdentifier());
			}
		}
		if(noneFound)
			cout<<"(No similar songs founds)"<<endl;
	}
}

string DotifyDriver::autogenerateRandomizerHelper(){
	int randomChoice=rand()%3;
	string parameter;
	if(randomChoice==0)
		parameter="TITLE";
	else if(randomChoice==1)
		parameter="ARTIST";
	else if(randomChoice==2)
		parameter="ALBUM";
	return parameter;
}

//takes in file names and creates ofstreams for saving to text files
void DotifyDriver::exportLibraryAndPlaylists(string libraryFile, string playlistFile){

	ofstream outfileLibrary(libraryFile);
	ofstream outfilePlaylist(playlistFile);

if(outfileLibrary.fail()||outfilePlaylist.fail()){
	cout<<"File Error."<<endl;
}
else{

	for (map<string, Song*>::iterator it=library.beginLibrary(); it!=library.endLibrary(); it++){
		outfileLibrary<<it->second->getTitle()<<"|";
		outfileLibrary<<it->second->getArtist()<<"|";
		outfileLibrary<<it->second->getAlbum()<<"|";
		outfileLibrary<<it->second->getAmtPlays()<<"|";
		outfileLibrary<<it->second->getIdentifier();
		outfileLibrary<<endl;
	}
	for (auto& key:playlists){
		outfilePlaylist<<key.first<<"|"<<key.second->getRating()<<"|"<<key.second->getNumberOfSongs();
		outfilePlaylist<<endl;
		for (map<string, Song*>::iterator it=key.second->begin(); it!=key.second->end(); it++){//error here
			outfilePlaylist<<it->second->getTitle()<<"|";
			outfilePlaylist<<it->second->getArtist()<<"|";
			outfilePlaylist<<it->second->getAlbum();
			outfilePlaylist<<endl;
		}
	}
    }
}

//adds songs to a playlist from a file
//if the key from the song is not found in the library
//inform user of song not found and do not add
void DotifyDriver::addSongToPlaylistFromFile(string name, string playlistsKey, Song* x){
	if(library.isKeyInLibrary(name)&&playlists.count(playlistsKey)==1)
		playlists.find(playlistsKey)->second->addSong(name, x);
	else if(!library.isKeyInLibrary(name))
		cout<<"Could not find song in library. "<<name<<endl;
}


//calls function in library
//takes an ID# and times played as args
void DotifyDriver::playSong(int x, int y){
	library.updateAmountOfPlays_Library(x, y);
}

//takes a playslist name and a library sonng ID# as args
void DotifyDriver::addSongToPlaylist(string name, int x){
	if(!isPlaylist(name)){
		cout<<"\""<<name<<"\" is not a valid playlist."<<endl;
	}
	else if(getLibrarySize()==0){
		cout<<"No songs exist in library."<<endl;
	}
	else if(!isInLibrary(x)){
		cout<<"Song with ID# "<<x<<" does not exist in the library."<<endl;
	}
	else{
		for (map<string, Song*>::iterator it=library.beginLibrary(); it!=library.endLibrary(); it++){
			if(it->second->getIdentifier()==x){
				playlists.find(name)->second->addSong(it->first, it->second);
				cout<<"\""<<it->second->getTitle()<<"\" by "<<it->second->getArtist();
				cout<<" ("<<it->second->getAlbum()<<"), identified as #"<<it->second->getIdentifier();
				cout<<" successfully added to playlist \""<<name<<"\"."<<endl;
			}
		}
	}
}

//for Magic option in autogenerate
void DotifyDriver::addSongToPlaylistMagic(string name, int x){
	if(!isPlaylist(name)){
		cout<<"\""<<name<<"\" is not a valid playlist."<<endl;
	}
	else{
		for (map<string, Song*>::iterator it=library.beginLibrary(); it!=library.endLibrary(); it++){
			if(it->second->getIdentifier()==x){
				playlists.find(name)->second->addSong(it->first, it->second);
			}
		}
	}
}

